{"name": "test_allure[name1-123456-name1 登录成功]", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'url' in section: 'SIT'", "trace": "self = <configparser.ConfigParser object at 0x0000029556E6B550>, section = 'SIT'\noption = 'url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nD:\\Program Files\\python\\lib\\configparser.py:789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'ws_host': 'https://sit.aimidea.cn:23632', 'http_host': 'https://www.baidu.com'}, {})\nkey = 'url'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nD:\\Program Files\\python\\lib\\collections\\__init__.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'ws_host': 'https://sit.aimidea.cn:23632', 'http_host': 'https://www.baidu.com'}, {})\nkey = 'url'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'url'\n\nD:\\Program Files\\python\\lib\\collections\\__init__.py:890: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'host' for <Function test_allure[name1-123456-name1 \\u767b\\u5f55\\u6210\\u529f]>>\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def host(request):\n        '''获取命令行参数'''\n        # 获取命令行参数给到环境变量\n        env = request.config.getoption(\"--env\").upper()\n>       test_host = Conf(env_conf_path).get_value(env, \"url\")\n\n..\\..\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\common\\conf.py:10: in get_value\n    value=self.cf.get(section,option)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x0000029556E6B550>, section = 'SIT'\noption = 'url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'url' in section: 'SIT'\n\nD:\\Program Files\\python\\lib\\configparser.py:792: NoOptionError"}, "parameters": [{"name": "username", "value": "'name1'"}, {"name": "pwd", "value": "'123456'"}, {"name": "tatile", "value": "'name1 登录成功'"}], "start": 1609825284386, "stop": 1609825284386, "uuid": "9b241081-931b-42b6-9e7d-a1359c01f35a", "historyId": "9505d12bb6dec3516795cdab69dcb334", "testCaseId": "621fc84bb82c2543fb641b0eeb0e414b", "fullName": "testcase.TestAiyunNew.test_allureDemo.TestLogin#test_allure", "labels": [{"name": "feature", "value": "AC"}, {"name": "parentSuite", "value": "testcase.TestAiyunNew"}, {"name": "suite", "value": "test_allureDemo"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "lijq36721"}, {"name": "thread", "value": "12712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.TestAiyunNew.test_allureDemo"}]}